<channel version="3.10.1">
  <id>27964123-ef69-4aac-a2c5-8c8adf8581b5</id>
  <nextMetaDataId>5</nextMetaDataId>
  <name>QS7_File_Import_new</name>
  <description>IB:/media/windowsshare/procedureinterface/7Flex/new_interface</description>
  <revision>250</revision>
  <sourceConnector version="3.10.1">
    <metaDataId>0</metaDataId>
    <name>sourceConnector</name>
    <properties class="com.mirth.connect.connectors.file.FileReceiverProperties" version="3.10.1">
      <pluginProperties/>
      <pollConnectorProperties version="3.10.1">
        <pollingType>INTERVAL</pollingType>
        <pollOnStart>true</pollOnStart>
        <pollingFrequency>5000</pollingFrequency>
        <pollingHour>0</pollingHour>
        <pollingMinute>0</pollingMinute>
        <cronJobs/>
        <pollConnectorPropertiesAdvanced>
          <weekly>true</weekly>
          <inactiveDays>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
          </inactiveDays>
          <dayOfMonth>1</dayOfMonth>
          <allDay>true</allDay>
          <startingHour>8</startingHour>
          <startingMinute>0</startingMinute>
          <endingHour>17</endingHour>
          <endingMinute>0</endingMinute>
        </pollConnectorPropertiesAdvanced>
      </pollConnectorProperties>
      <sourceConnectorProperties version="3.10.1">
        <responseVariable>Auto-generate (Destinations completed)</responseVariable>
        <respondAfterProcessing>true</respondAfterProcessing>
        <processBatch>false</processBatch>
        <firstResponse>false</firstResponse>
        <processingThreads>4</processingThreads>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
        <queueBufferSize>1000</queueBufferSize>
      </sourceConnectorProperties>
      <scheme>FILE</scheme>
      <host>/media/windowsshare/procedureinterface/7Flex/new_interface</host>
      <fileFilter>*.txt</fileFilter>
      <regex>false</regex>
      <directoryRecursion>false</directoryRecursion>
      <ignoreDot>true</ignoreDot>
      <anonymous>true</anonymous>
      <username>anonymous</username>
      <password>anonymous</password>
      <timeout>10000</timeout>
      <secure>true</secure>
      <passive>true</passive>
      <validateConnection>true</validateConnection>
      <afterProcessingAction>MOVE</afterProcessingAction>
      <moveToDirectory>/media/windowsshare/procedureinterface/7Flex/new_archive</moveToDirectory>
      <moveToFileName>${originalFilename}_${DATE}_${SYSTIME}</moveToFileName>
      <errorReadingAction>NONE</errorReadingAction>
      <errorResponseAction>MOVE</errorResponseAction>
      <errorMoveToDirectory>/media/windowsshare/procedureinterface/7Flex/new_error</errorMoveToDirectory>
      <errorMoveToFileName>${originalFilename}</errorMoveToFileName>
      <checkFileAge>true</checkFileAge>
      <fileAge>2000</fileAge>
      <fileSizeMinimum>5</fileSizeMinimum>
      <fileSizeMaximum>90000</fileSizeMaximum>
      <ignoreFileSizeMaximum>false</ignoreFileSizeMaximum>
      <sortBy>date</sortBy>
      <binary>false</binary>
      <charsetEncoding>DEFAULT_ENCODING</charsetEncoding>
    </properties>
    <transformer version="3.10.1">
      <elements>
        <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.10.1">
          <name>ResultsToTextFile</name>
          <sequenceNumber>0</sequenceNumber>
          <enabled>true</enabled>
          <script>var RPValueCutoff = 40
//var blSendToLIS=true;
var blSaveResultTextFile=true;
var blSendToMAWDLIS = true;
var strOutputPath = &apos;/media/windowsshare/procedureinterface/7Flex/new_archive/Result_&apos;
const strMAWDLISMirthChannel = &apos;OB_MAWDLIS_CDC_Plate_Result&apos;
var debug = true

var outboundMsg=
{
  &quot;apiKey&quot; : &quot;63f1d0de-83b4-4bf1-b2f7-38a80b8ebac0&quot;,
  &quot;resultOperation&quot; : {
    &quot;target&quot; : &quot;covidResult&quot;,
    &quot;method&quot; : &quot;updateCOVIDResult&quot;,
    &quot;results&quot; : [
    ]
  }
}


//STEP 1 : parse msg[&apos;row&apos;] XML to JSON to JS Object
//STEP 2 : find offset in file based on where key WellPosition equals the string Well Position
//STEP 3 : splice Object at offset
//STEP 4 : double checks the offset and splice above ,if any rows have a bad sample name delete them
//STEP 5 : Start building our Object &apos;SampleObjects&apos; structure, set the key [SampleName] [TargetName] = key [CT] and key [SampleName] [TargetName]+&apos;Well&apos; = key [WellPosition]
//STEP 6 : check for null values if so set value to &apos;Not Found&apos; ,send to EvalCase function for each SampleName grouping

///////////////////////////////////////////////////////////////////////////////////
//STEP 1 : 
//parse msg[&apos;row&apos;] XML to JSON to JS Object
if(debug){logger.info(&quot;STEP 1&quot;)}
var keys = {};
Object.keys(msg[&apos;row&apos;]).forEach(function(item) {keys[item]= JSON.parse(XmlUtil.toJson(msg[&apos;row&apos;][item]))[&apos;row&apos;]})

//STEP 1 Validate: break on bad offset
if(Object.keys(keys).length==0){throw(&apos;STEP 1 Validate: Bad Object Parse&apos;)}
if(debug){logger.info(&quot;STEP 1 Validation Good&quot;)}
///////////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////////
//STEP 2 : 
//	find offset in file based on where key WellPosition equal the string Well Position
if(debug){logger.info(&quot;STEP 2&quot;)}
var offset=0;
Object.keys(keys).forEach(function(item) {
	keys[item][&apos;WellPosition&apos;] = keys[item][&apos;WellPosition&apos;]||&apos;&apos;
	if(keys[item][&apos;WellPosition&apos;]==&apos;Well Position&apos;){
		offset=parseInt(item)+1
	}
});

//STEP 2 Validate: break on bad offset
if(offset==0){throw(&apos;STEP 2 Validate: Bad Offset&apos;)}
if(debug){logger.info(&quot;STEP 2 Validation Good&quot;)}
///////////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////////
//STEP 3 :
//	splice Object at offset
if(debug){logger.info(&quot;STEP 3&quot;)}
Object.keys(keys).forEach(function(item) {if(parseInt(item)&lt;parseInt(offset)){delete keys[item]}})

//STEP 3 Validate: break if splice removes everything
if(Object.keys(keys).length==0){throw(&apos;STEP 3 Validate: Bad Splice&apos;)}
if(debug){logger.info(&quot;STEP 3 Validation Good&quot;)}
///////////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////////
//STEP 4 :
//	double checks the offset and splice above ,if any rows have a bad sample name delete them
//  	create the SampleObjects key [SampleName]
if(debug){logger.info(&quot;STEP 4&quot;)}
//var badkeylist=[];
var goodkeylist=[];
var SampleObjects=[];
Object.keys(keys).forEach(function(item) {
	if(debug){
		logger.info(&apos;4.1&apos;+JSON.stringify(keys))	
		logger.info(&apos;4.2&apos;+JSON.stringify(keys[item]))	
		logger.info(&apos;4.3&apos;+JSON.stringify(keys[item][&apos;SampleName&apos;]))	
	}
	if (keys[item] === undefined){}
	else if (keys[item][&apos;SampleName&apos;] === undefined || keys[item][&apos;SampleName&apos;] === null){
		delete keys[item]
	}&#xd;	else if (keys[item][&apos;SampleName&apos;].length == 0 || keys[item][&apos;SampleName&apos;] == &apos;Sample Name&apos;){
		//badkeylist.push(keys[item][&apos;SampleName&apos;]);
		delete keys[item]
	}
	else {
		SampleObjects[keys[item][&apos;SampleName&apos;]]= {&apos;test&apos;:&apos;test&apos;};
		if (!goodkeylist.includes(keys[item][&apos;SampleName&apos;])){
			goodkeylist.push(keys[item][&apos;SampleName&apos;]);
		}
	}
})

//STEP 4 Validate: break if less then 2 good rows found, 2 instead of 1 to prevent incorrect column order from processing further
if(debug){logger.info(&apos;LENGTH: &apos;+goodkeylist.length+&apos; &apos;+JSON.stringify(goodkeylist))}
if(goodkeylist.length&lt;2){throw(&apos;STEP 4 Validate: No Good Key Values&apos;)}
if(debug){logger.info(&quot;STEP 4 Validation Good&quot;)}
///////////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////////
//STEP 5 : 
//	Start building our Object &apos;SampleObjects&apos; structure
//		for each valid key
//			set the key [SampleName] [TargetName] = key [CT]
//			set the key [SampleName] [TargetName]+&apos;Well&apos; = key [WellPosition]
if(debug){logger.info(&quot;STEP 5&quot;)}
Object.keys(keys).forEach(function(item) {
  var objName = keys[item][&apos;SampleName&apos;]
  
  var objKey  = keys[item][&apos;TargetName&apos;]
  var objVal  = keys[item][&apos;CT&apos;]
  if(objKey &amp;&amp; objVal){
	  if(objKey.toString().length&gt;0 &amp;&amp; objVal.toString().length&gt;0){
	  	 SampleObjects[objName][objKey]=objVal
	  }
  }
  
  var objKey2  = keys[item][&apos;TargetName&apos;]+&apos;Well&apos;
  var objVal2  = keys[item][&apos;WellPosition&apos;]
  if(objKey &amp;&amp; objVal){
	  if(objKey2.toString().length&gt;0 &amp;&amp; objVal2.toString().length&gt;0){
	  	SampleObjects[objName][objKey2]=objVal2
	  }
  }
});

//STEP 5 Validate: break if SampleObjects is empty
if(Object.keys(SampleObjects).length==0){throw(&apos;STEP 5 Validate: SampleObjects is Empty&apos;)}
if(debug){logger.info(&quot;STEP 5 Validation Good&quot;)}
///////////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////////
//STEP 6 : 
//	check for null values if so set value to &apos;Not Found&apos;
//	send to EvalCase function for each SampleName grouping
//	push results to text file
if(debug){logger.info(&quot;STEP 6&quot;)}
var strResultTextFile=[];
var strMAWDLISResult=[];
Object.keys(SampleObjects).forEach(function(item) { 
	var n1 = SampleObjects[item][&apos;N1&apos;]||&apos;Not Found&apos;
	var n2 = SampleObjects[item][&apos;N2&apos;]||&apos;Not Found&apos;
	var rp = SampleObjects[item][&apos;RP&apos;]||&apos;Not Found&apos;

	var results=EvalCovidCase(n1,n2,rp,RPValueCutoff)
	SampleObjects[item][&apos;result&apos;] = results[&apos;result&apos;]
	SampleObjects[item][&apos;comment&apos;]  = results[&apos;comment&apos;]
	
	var result = SampleObjects[item][&apos;result&apos;]||&apos;&apos;
	var comment = SampleObjects[item][&apos;comment&apos;]||&apos;&apos;
	var rpWell = SampleObjects[item][&apos;RPWell&apos;]||&apos;&apos;
	var n1Well = SampleObjects[item][&apos;N1Well&apos;]||&apos;&apos;
	var n2Well = SampleObjects[item][&apos;N2Well&apos;]||&apos;&apos;

	strResultTextFile.push(item + &apos;: &apos; + result + &apos;-&apos; + comment+&apos; Msg ID:&apos; + channelName + &apos;_&apos; + connectorMessage.getMessageId())
	strMAWDLISResult.push({&apos;reportNo&apos;:item,&apos;result&apos;:result})
})
//STEP 6 Validate: break if no results found in strResultTextFile
if(strResultTextFile.length==0){throw(&apos;STEP 6 Validate: strResultTextFile is Empty&apos;)}
if(debug){logger.info(&quot;STEP 6 Validation Good&quot;)}
///////////////////////////////////////////////////////////////////////////////////


if (blSaveResultTextFile) {
	var strFileName = strOutputPath + Date.now() + sourceMap.get(&apos;originalFilename&apos;)
	FileUtil.write(strFileName, true, strResultTextFile.join(&apos;\r\n&apos;))
}


if (blSendToMAWDLIS) {
 tmp[&apos;resultOperation&apos;][&apos;results&apos;]=strMAWDLISResult
 tmp[&apos;resultOperation&apos;][&apos;send&apos;]=true
}

//ADD INSERT</script>
        </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
      </elements>
      <inboundTemplate encoding="base64"></inboundTemplate>
      <outboundTemplate encoding="base64">ewogICJhcGlLZXkiIDogIjYzZjFkMGRlLTgzYjQtNGJmMS1iMmY3LTM4YTgwYjhlYmFjMCIsCiAgInJlc3VsdE9wZXJhdGlvbiIgOiB7CiAgICAidGFyZ2V0IiA6ICJjb3ZpZFJlc3VsdCIsCiAgICAibWV0aG9kIiA6ICJ1cGRhdGVDT1ZJRFJlc3VsdCIsCiAgICAicmVzdWx0cyIgOiBbCiAgICBdCiAgfQp9Cg==</outboundTemplate>
      <inboundDataType>DELIMITED</inboundDataType>
      <outboundDataType>JSON</outboundDataType>
      <inboundProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedDataTypeProperties" version="3.10.1">
        <serializationProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedSerializationProperties" version="3.10.1">
          <columnDelimiter>\t</columnDelimiter>
          <recordDelimiter>\n</recordDelimiter>
          <quoteToken>&quot;</quoteToken>
          <escapeWithDoubleQuote>true</escapeWithDoubleQuote>
          <quoteEscapeToken>\</quoteEscapeToken>
          <columnNames>
            <string>Well</string>
            <string>WellPosition</string>
            <string>SampleName</string>
            <string>TargetName</string>
            <string>Task</string>
            <string>Reporter</string>
            <string>Quencher</string>
            <string>CT</string>
            <string>CtThreshold</string>
          </columnNames>
          <numberedRows>false</numberedRows>
          <ignoreCR>true</ignoreCR>
        </serializationProperties>
        <deserializationProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedDeserializationProperties" version="3.10.1">
          <columnDelimiter>,</columnDelimiter>
          <recordDelimiter>\n</recordDelimiter>
          <quoteToken>&quot;</quoteToken>
          <escapeWithDoubleQuote>true</escapeWithDoubleQuote>
          <quoteEscapeToken>\</quoteEscapeToken>
        </deserializationProperties>
        <batchProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedBatchProperties" version="3.10.1">
          <splitType>Record</splitType>
          <batchSkipRecords>0</batchSkipRecords>
          <batchMessageDelimiter></batchMessageDelimiter>
          <batchMessageDelimiterIncluded>false</batchMessageDelimiterIncluded>
          <batchGroupingColumn></batchGroupingColumn>
          <batchScript></batchScript>
        </batchProperties>
      </inboundProperties>
      <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.10.1">
        <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.10.1">
          <splitType>JavaScript</splitType>
          <batchScript></batchScript>
        </batchProperties>
      </outboundProperties>
    </transformer>
    <filter version="3.10.1">
      <elements/>
    </filter>
    <transportName>File Reader</transportName>
    <mode>SOURCE</mode>
    <enabled>true</enabled>
    <waitForPrevious>true</waitForPrevious>
  </sourceConnector>
  <destinationConnectors>
    <connector version="3.10.1">
      <metaDataId>4</metaDataId>
      <name>DistributeMessage</name>
      <properties class="com.mirth.connect.connectors.tcp.TcpDispatcherProperties" version="3.10.1">
        <pluginProperties/>
        <destinationConnectorProperties version="3.10.1">
          <queueEnabled>true</queueEnabled>
          <sendFirst>true</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>5</retryCount>
          <rotate>true</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>true</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
          <reattachAttachments>true</reattachAttachments>
        </destinationConnectorProperties>
        <transmissionModeProperties class="com.mirth.connect.plugins.mllpmode.MLLPModeProperties">
          <pluginPointName>MLLP</pluginPointName>
          <startOfMessageBytes>0B</startOfMessageBytes>
          <endOfMessageBytes>1C0D</endOfMessageBytes>
          <useMLLPv2>false</useMLLPv2>
          <ackBytes>06</ackBytes>
          <nackBytes>15</nackBytes>
          <maxRetries>2</maxRetries>
        </transmissionModeProperties>
        <serverMode>false</serverMode>
        <remoteAddress>10.128.0.6</remoteAddress>
        <remotePort>8665</remotePort>
        <overrideLocalBinding>false</overrideLocalBinding>
        <localAddress>0.0.0.0</localAddress>
        <localPort>0</localPort>
        <sendTimeout>30000</sendTimeout>
        <bufferSize>65536</bufferSize>
        <maxConnections>10</maxConnections>
        <keepConnectionOpen>true</keepConnectionOpen>
        <checkRemoteHost>false</checkRemoteHost>
        <responseTimeout>30000</responseTimeout>
        <ignoreResponse>false</ignoreResponse>
        <queueOnResponseTimeout>true</queueOnResponseTimeout>
        <dataTypeBinary>false</dataTypeBinary>
        <charsetEncoding>DEFAULT_ENCODING</charsetEncoding>
        <template>${message.encodedData}</template>
      </properties>
      <transformer version="3.10.1">
        <elements/>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.10.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.10.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.10.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.10.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.10.1">
        <elements/>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.10.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.10.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.10.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.10.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.10.1">
        <elements>
          <com.mirth.connect.plugins.rulebuilder.RuleBuilderRule version="3.10.1">
            <name>Accept message if &quot;msg[&apos;resultOperation&apos;][&apos;send&apos;]&quot; equals true</name>
            <sequenceNumber>0</sequenceNumber>
            <enabled>true</enabled>
            <field>msg[&apos;resultOperation&apos;][&apos;send&apos;]</field>
            <condition>EQUALS</condition>
            <values>
              <string>true</string>
            </values>
          </com.mirth.connect.plugins.rulebuilder.RuleBuilderRule>
        </elements>
      </filter>
      <transportName>TCP Sender</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>false</waitForPrevious>
    </connector>
  </destinationConnectors>
  <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
  <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
  <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
  <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
  <properties version="3.10.1">
    <clearGlobalChannelMap>true</clearGlobalChannelMap>
    <messageStorageMode>DEVELOPMENT</messageStorageMode>
    <encryptData>false</encryptData>
    <removeContentOnCompletion>false</removeContentOnCompletion>
    <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
    <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
    <initialState>STARTED</initialState>
    <storeAttachments>true</storeAttachments>
    <metaDataColumns>
      <metaDataColumn>
        <name>SOURCE</name>
        <type>STRING</type>
        <mappingName>mirth_source</mappingName>
      </metaDataColumn>
      <metaDataColumn>
        <name>TYPE</name>
        <type>STRING</type>
        <mappingName>mirth_type</mappingName>
      </metaDataColumn>
    </metaDataColumns>
    <attachmentProperties version="3.10.1">
      <type>None</type>
      <properties/>
    </attachmentProperties>
    <resourceIds class="linked-hash-map">
      <entry>
        <string>Default Resource</string>
        <string>[Default Resource]</string>
      </entry>
    </resourceIds>
  </properties>
  <exportData>
    <metadata>
      <enabled>true</enabled>
      <lastModified>
        <time>1634157390375</time>
        <timezone>America/Chicago</timezone>
      </lastModified>
      <pruningSettings>
        <archiveEnabled>true</archiveEnabled>
      </pruningSettings>
    </metadata>
    <codeTemplateLibraries>
      <codeTemplateLibrary version="3.10.1">
        <id>e179dbdb-5c07-43be-80d2-6adef2c7a9e4</id>
        <name>Library 1</name>
        <revision>6</revision>
        <lastModified>
          <time>1633356687045</time>
          <timezone>America/Chicago</timezone>
        </lastModified>
        <description>Eval Covid Cases</description>
        <includeNewChannels>false</includeNewChannels>
        <enabledChannelIds>
          <string>27964123-ef69-4aac-a2c5-8c8adf8581b5</string>
        </enabledChannelIds>
        <disabledChannelIds>
          <string>b6055b22-c46f-4597-ab6a-d81579f94a4a</string>
          <string>9eeaeb99-8c79-4780-8992-93fffcbba794</string>
          <string>0bb9b087-5e6b-4a07-93b9-00b96d804674</string>
          <string>b5835609-ade8-4074-b3a8-4d52e6196cb2</string>
          <string>580c9f13-6ccc-42d8-8b03-984e149b2383</string>
          <string>0fe3e730-e896-4601-8bb6-38133e2650b5</string>
          <string>c762def1-bd60-4444-a7b3-75163392ffb2</string>
          <string>2f82f670-8de5-4820-b574-5ea4a9a18e34</string>
          <string>c00bc3d9-45f4-4024-8555-c0371e451385</string>
          <string>89a362d4-d388-4696-a5c6-57d543ace34f</string>
          <string>62554e26-80ef-4e41-95ac-61acff9ed146</string>
          <string>e3ad9af6-aa69-4926-8e13-b3634cbb4d98</string>
          <string>6f186b33-79aa-4c37-a748-7b5cdef3b590</string>
          <string>173e6af9-8372-493b-a025-4e90077912c1</string>
          <string>41724da4-621f-409b-a6d7-e4c8b2a545df</string>
          <string>5bf53659-e806-4b88-a4ed-66c5812e583f</string>
          <string>e98e0297-0a8f-49df-94be-7239b6ebe464</string>
          <string>43977b63-a44d-42bb-90e8-04d89f6e5c33</string>
          <string>035fbc3e-c910-4808-8e60-f672bbfb7b84</string>
          <string>aeddc01b-e265-4c69-8d06-51243cdafbff</string>
          <string>f73a943a-ebd1-49cb-8fc6-e5a910407930</string>
          <string>14a6ef94-a803-4fb8-b682-c75e09a12f5a</string>
          <string>d0e05ee0-21cc-4c11-9f97-424707d43b68</string>
          <string>acd256c2-2ce3-4159-b6fb-24c99abebdea</string>
          <string>2ea7dc4e-94a8-46f6-b3bb-e17bd6c34858</string>
          <string>decd4647-56e6-4475-bc4f-b6ace79e8d60</string>
          <string>75041a92-cbae-4bbb-912a-0639c153d791</string>
          <string>303183a5-a2c3-456c-bf2a-89777a169c6c</string>
          <string>238d3078-7810-4944-bc85-19adb00ae20e</string>
          <string>5f8f082e-2a63-4d9b-ba9f-c65e182927a9</string>
          <string>b5b1b0b4-1346-4cf7-8d67-b03d4dea820f</string>
          <string>0f629ed5-9844-4119-8915-dc46f934793d</string>
          <string>eeafb8f0-4c11-46ff-ad56-0846c8558c50</string>
          <string>075cd4b0-b996-4a28-8ad0-8b64979c3632</string>
          <string>3bd887d0-e124-4581-928f-cf076731bf8b</string>
          <string>4d695ab6-a628-42ba-8fbc-c6f0554f08a3</string>
          <string>4368dca4-3f9b-49e6-8a89-73d89e002129</string>
          <string>7a90b459-7653-4c0b-9b73-c752d712c3f4</string>
          <string>a55f3980-4420-4568-8273-3c1ea9c17870</string>
          <string>f2292198-4127-47fa-9238-c22f01d68cf3</string>
          <string>7d18a0d8-1be6-4307-a91e-7abe9a63f13f</string>
          <string>ac37e39b-18e9-470e-90c2-a1763a85bd89</string>
          <string>29b272c7-d693-4e8d-8803-1d0b58d1aed7</string>
          <string>73bde727-9012-4bef-8c69-ae376837ddfb</string>
          <string>398e1651-68a3-4cc0-8841-cb8a66d67762</string>
          <string>0b9dfe6b-2327-4180-a389-a3478b7099f5</string>
          <string>f42f02d0-9d9a-474a-a4e3-727076208167</string>
          <string>9d07db7c-82c6-460d-b36b-d13381f2f8e7</string>
          <string>2ce291b2-ab70-4cc7-9793-647f7da4379b</string>
          <string>ac10df61-e4c8-4c38-a6c7-a575391d6b70</string>
        </disabledChannelIds>
        <codeTemplates>
          <codeTemplate version="3.10.1">
            <id>cbb235d1-011f-4d56-9311-6911a4a11624</id>
            <name>Template 1</name>
            <revision>5</revision>
            <lastModified>
              <time>1633623253922</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>GLOBAL_PREPROCESSOR</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>GLOBAL_DEPLOY</contextType>
                <contextType>GLOBAL_UNDEPLOY</contextType>
                <contextType>GLOBAL_POSTPROCESSOR</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>function EvalCovidCase(n1,n2,rp,rpCutoff){
  if (n1!=&apos;Not Found&apos;){n1 = parseFloat(n1)||&quot;Undetermined&quot;}
  if (n2!=&apos;Not Found&apos;){n2 = parseFloat(n2)||&quot;Undetermined&quot;}
  if (rp!=&apos;Not Found&apos;){rp = parseFloat(rp)||&quot;Undetermined&quot;}
  
  var rpValid =  (rp != &apos;Not Found&apos; &amp;&amp; rp != &apos;Undetermined&apos; ? true : false)
  var n1Valid =  (n1 != &apos;Not Found&apos; &amp;&amp; n1 != &apos;Undetermined&apos; ? true : false)
  var n2Valid =  (n2 != &apos;Not Found&apos; &amp;&amp; n2 != &apos;Undetermined&apos; ? true : false)

  var rpLessThenCutoff = (rp &lt; rpCutoff);
  var n1LessThenCutoff = (n1 &lt; rpCutoff);
  var n2LessThenCutoff = (n2 &lt; rpCutoff);
  
  if(!rpLessThenCutoff &amp;&amp; rpValid){
		return {result:&apos;Hold&apos;,comment:&apos;Invalid RP, greater than RP Cutoff&apos;}
  }
  
  if(!n1LessThenCutoff &amp;&amp; n1Valid){
		return {result:&apos;Hold&apos;,comment:&apos;HIGH N1 CT Value&apos;}
  }
  
  if(!n2LessThenCutoff &amp;&amp; n2Valid){
		return {result:&apos;Hold&apos;,comment:&apos;HIGH N2 CT Value&apos;}
  }

  if(n1 == &apos;Undetermined&apos; &amp;&amp; n2 == &apos;Undetermined&apos;){
  	return {result:&apos;Not Detected&apos;,comment:&apos;&apos;}
  }
  
  if((n1LessThenCutoff &amp;&amp; !n2LessThenCutoff)||(n2LessThenCutoff &amp;&amp; !n1LessThenCutoff)){
  	return {result:&apos;Hold&apos;,comment:&apos;N1 and N2 CT Discrepancy&apos;}
  }
  
  if(n1LessThenCutoff &amp;&amp; n2LessThenCutoff){
  	return {result:&apos;Detected&apos;,comment:&apos;&apos;}
  }
  //DEFAULT VALUE
  return {result:&apos;Hold&apos;,comment:&apos;NO QUAL&apos;}
  
}

function EvalFluCase(n1,n2,rp,rpCutoff){
  if (n1!=&apos;Not Found&apos;){n1 = parseFloat(n1)||&quot;Undetermined&quot;}
  if (n2!=&apos;Not Found&apos;){n2 = parseFloat(n2)||&quot;Undetermined&quot;}
  if (rp!=&apos;Not Found&apos;){rp = parseFloat(rp)||&quot;Undetermined&quot;}
  
  var rpValid =  (rp != &apos;Not Found&apos; &amp;&amp; rp != &apos;Undetermined&apos; ? true : false)
  var n1Valid =  (n1 != &apos;Not Found&apos; &amp;&amp; n1 != &apos;Undetermined&apos; ? true : false)
  var n2Valid =  (n2 != &apos;Not Found&apos; &amp;&amp; n2 != &apos;Undetermined&apos; ? true : false)

  var rpLessThenCutoff = (rp &lt; rpCutoff);
  var n1LessThenCutoff = (n1 &lt; rpCutoff);
  var n2LessThenCutoff = (n2 &lt; rpCutoff);
  
  if(!rpLessThenCutoff &amp;&amp; rpValid){
		return {result:&apos;Hold&apos;,comment:&apos;Invalid RP, greater than RP Cutoff&apos;}
  }
  
  if(!n1LessThenCutoff &amp;&amp; n1Valid){
		return {result:&apos;Hold&apos;,comment:&apos;HIGH N1 CT Value&apos;}
  }
  
  if(!n2LessThenCutoff &amp;&amp; n2Valid){
		return {result:&apos;Hold&apos;,comment:&apos;HIGH N2 CT Value&apos;}
  }

  if(n1 == &apos;Undetermined&apos; &amp;&amp; n2 == &apos;Undetermined&apos;){
  	return {result:&apos;Not Detected&apos;,comment:&apos;&apos;}
  }
  
  if((n1LessThenCutoff &amp;&amp; !n2LessThenCutoff)||(n2LessThenCutoff &amp;&amp; !n1LessThenCutoff)){
  	return {result:&apos;Hold&apos;,comment:&apos;N1 and N2 CT Discrepancy&apos;}
  }
  
  if(n1LessThenCutoff &amp;&amp; n2LessThenCutoff){
  	return {result:&apos;Detected&apos;,comment:&apos;&apos;}
  }
  //DEFAULT VALUE
  return {result:&apos;Hold&apos;,comment:&apos;NO QUAL&apos;}
  
}</code>
            </properties>
          </codeTemplate>
        </codeTemplates>
      </codeTemplateLibrary>
    </codeTemplateLibraries>
  </exportData>
</channel>